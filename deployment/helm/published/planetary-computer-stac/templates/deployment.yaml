{{- if .Values.stac.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pcstac.fullname" . }}
  labels:
    {{- include "pcstac.labels" . | nindent 4 }}
spec:
  {{- if not .Values.stac.deploy.autoscaling.enabled }}
  replicas: {{ .Values.stac.deploy.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pcstac.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.stac.deploy.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pcstac.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.stac.deploy.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pcstac.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.stac.deploy.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.stac.deploy.securityContext | nindent 12 }}
          image: "{{ .Values.stac.image.repository }}:{{ .Values.stac.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.stac.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: APP_ROOT_PATH
              value: "{{ .Values.stac.appRootPath }}"
            - name: APP_HOST
              value: "{{ .Values.stac.host }}"
            - name: APP_PORT
              value: "{{ .Values.stac.port }}"
            - name: FORWARDED_ALLOW_IPS
              value: "*"
            - name: "MAX_WORKERS"
              value: "{{ .Values.stac.server.maxWorkers }}"
            - name: "POOL_SIZE"
              value: "{{ .Values.stac.server.poolSize }}"
            - name: TILER_HREF
              value: "{{ .Values.stac.tiler_href }}"
            - name: POSTGRES_USER
              value: "{{ .Values.postgres.user }}"
            - name: POSTGRES_PASS
              value: "{{ .Values.postgres.password }}"
            - name: POSTGRES_DBNAME
              value: "{{ .Values.postgres.dbName }}"
            - name: POSTGRES_PORT
              value: "{{ .Values.postgres.port }}"
            - name: POSTGRES_HOST_READER
              value: "{{ .Values.postgres.serverName }}"
            - name: POSTGRES_HOST_WRITER
              value: "{{ .Values.postgres.serverName }}"
            - name: PGUSER
              value: "{{ .Values.postgres.user }}"
            - name: PGPASSWORD
              value: "{{ .Values.postgres.password }}"
            - name: PGDATABASE
              value: "{{ .Values.postgres.dbName }}"
            - name: PGPORT
              value: "{{ .Values.postgres.port }}"
            - name: PGHOST
              value: "{{ .Values.postgres.serverName }}"
            - name: ENVIRONMENT
              value: "{{ .Values.environment }}"
            - name: "PGSSLMODE"
              value: "require"
            - name: "DEBUG"
              value: "{{ .Values.stac.debug }}"
            - name: APP_INSIGHTS_INSTRUMENTATION_KEY
              value: "{{ .Values.metrics.instrumentationKey }}"
            - name: APP_LIVENESS_PROBE_PATH
              value: "/stac/_mgmt/ping"

          livenessProbe:
            httpGet:
              path: "/_mgmt/ping"
              port: http
          readinessProbe:
            httpGet:
              path: "/_mgmt/ping"
              port: http
          resources:
            {{- toYaml .Values.stac.deploy.resources | nindent 12 }}
      {{- with .Values.stac.deploy.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stac.deploy.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stac.deploy.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
